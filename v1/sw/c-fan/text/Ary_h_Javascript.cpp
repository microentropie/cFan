// EmbedInSource v2018-04-03 (C) 2018 microentropie.com
// Source: 'cFan.js', converted: 2018-04-08 16:22:01

static const char js[5277] PROGMEM =
"function AjaxIrCodes() { AjaxCall(\"/ajaxCall?q=ir&t=\" + Math.random(), AjaxReturnedIr, null) }\r\n"
"function AjaxMachineStatus() { AjaxCall(\"/ajaxCall?q=ms\", AjaxReturnedMachineStatus, null) }\r\n"
"function AjaxMachineConfig() { AjaxCall(\"/ajaxCall?q=mc\", AjaxReturnedMachineConfig, null) }\r\n"
"function UpdateTime(loadType, cmd) {\r\n"
"   AjaxCall(\"/ajaxCall?q=ut&lt=\" + loadType + \"&cmd=\" + cmd.toString(), AjaxReturnedMachineStatus, null)\r\n"
"}\r\n"
"\r\n"
"function OnLoadIrDoc(t) {\r\n"
"   t = typeof t !== 'undefined' ? t : 10;\r\n"
"   if (t < 1) t = 1;\r\n"
"   else if (t > 60) t = 60;\r\n"
"   setInterval(\"AjaxIrCodes()\", t * 1000);\r\n"
"}\r\n"
"\r\n"
"function OnLoadcFanDoc(t) {\r\n"
"   AjaxMachineConfig();\r\n"
"   AjaxMachineStatus();\r\n"
"   t = typeof t !== 'undefined' ? t : 10;\r\n"
"   if (t < 1) t = 1;\r\n"
"   else if (t > 60) t = 60;\r\n"
"   setInterval(\"AjaxMachineStatus()\", t * 1000);\r\n"
"}\r\n"
"\r\n"
"function AjaxReturnedIr(xhttp) {\r\n"
"   if (!isEmptyString(xhttp.responseText))\r\n"
"      document.getElementById(\"IrRxTxt\").innerHTML = xhttp.responseText;\r\n"
"}\r\n"
"\r\n"
"function AjaxReturnedMachineStatus(xhttp) {\r\n"
"   //console.log(\"AjaxReturnedMachineStatus 1\");\r\n"
"   if (isEmptyString(xhttp.responseText)) return; // empty response\r\n"
"   //console.log(\"AjaxReturnedMachineStatus raw-txt='\" + xhttp.responseText + \"'\");\r\n"
"   var csvDelimiter = xhttp.responseText.charCodeAt(0);\r\n"
"   if (csvDelimiter <= 32 || csvDelimiter > 126) return; // invalid response\r\n"
"   var str = xhttp.responseText.substring(1);\r\n"
"   //console.log(\"AjaxReturnedMachineStatus 2\");\r\n"
"   if (str.length >= 100) return; // invalid response\r\n"
"   var responseAry = str.split(xhttp.responseText.charAt(0));\r\n"
"   //var responseAry = CsvToArray(str, xhttp.responseText.charAt(0));\r\n"
"   //if (responseAry.length != 1) return; // invalid response\r\n"
"   //responseAry = responseAry[0]; // get 1st row\r\n"
"   //console.log(\"AjaxReturnedMachineStatus 3\");\r\n"
"   console.log(\"AjaxReturnedMachineStatus Array=\" + responseAry.toString());\r\n"
"   if (Number(responseAry[0]) + 1 != responseAry.length) return; // invalid response\r\n"
"   document.getElementById(\"tmprt\").innerHTML = responseAry[8];\r\n"
"   document.getElementById(\"dateTime\").innerHTML = responseAry[1];\r\n"
"   WriteFanOrLightData(responseAry, \"Fan\", 2);\r\n"
"   WriteFanOrLightData(responseAry, \"Light\", 5);\r\n"
"}\r\n"
"function WriteFanOrLightData(responseAry, name, baseIdx) {\r\n"
"   // fan or light\r\n"
"   document.getElementById(name + \"_sts\").innerHTML = responseAry[baseIdx + 1];\r\n"
"   var status = Number(responseAry[baseIdx]);\r\n"
"   if (status == 2)\r\n"
"      document.getElementById(name + \"_stl\").style.backgroundColor = \"grey\";\r\n"
"   else if (status == 1)\r\n"
"      document.getElementById(name + \"_stl\").style.backgroundColor = \"red\";\r\n"
"   else\r\n"
"      document.getElementById(name + \"_stl\").style.backgroundColor = \"blue\";\r\n"
"   document.getElementById(name + \"_tmr\").innerHTML = responseAry[baseIdx + 2];\r\n"
"}\r\n"
"\r\n"
"function AjaxReturnedMachineConfig(xhttp) {\r\n"
"   //console.log(\"AjaxReturnedMachineConfig 1\");\r\n"
"   if (isEmptyString(xhttp.responseText)) return; // empty response\r\n"
"   //console.log(\"AjaxReturnedMachineConfig raw-txt='\" + xhttp.responseText + \"'\");\r\n"
"   var csvDelimiter = xhttp.responseText.charCodeAt(0);\r\n"
"   if (csvDelimiter <= 32 || csvDelimiter > 126) return; // invalid response\r\n"
"   var str = xhttp.responseText.substring(1);\r\n"
"   //console.log(\"AjaxReturnedMachineConfig 2\");\r\n"
"   if (str.length >= 200) return; // invalid response\r\n"
"   var responseAry = str.split(xhttp.responseText.charAt(0));\r\n"
"   //console.log(\"AjaxReturnedMachineConfig 3\");\r\n"
"   console.log(\"AjaxReturnedMachineConfig Array=\" + responseAry.toString());\r\n"
"   if (Number(responseAry[0]) + 1 != responseAry.length) return; // invalid response\r\n"
"   document.title.innerHTML = responseAry[2];\r\n"
"   document.getElementById(\"mDesc\").innerHTML = responseAry[2];\r\n"
"   document.getElementById(\"mId\").innerHTML = responseAry[1];\r\n"
"   //var year = typeof responseAry[7] !== 'undefined' ? responseAry[7] : 2018;\r\n"
"   //if (year >= 2018 && year < 2100)\r\n"
"   //   document.getElementById(\"year\").innerHTML = year;\r\n"
"   WriteFanOrLightConfig(responseAry, \"Fan\", 3);\r\n"
"   WriteFanOrLightConfig(responseAry, \"Light\", 5);\r\n"
"}\r\n"
"function WriteFanOrLightConfig(responseAry, name, baseIdx) {\r\n"
"   // fan or light\r\n"
"   document.getElementById(name + \"_cfg\").innerHTML = responseAry[baseIdx + 1];\r\n"
"   document.getElementById(name + \"_tbl\").style.display = (responseAry[baseIdx] == \"0\") ? \"none\" : \"block\";\r\n"
"}\r\n"
"\r\n"
"//------------------------------\r\n"
"function AjaxCall(url, returnFn, postData) {\r\n"
"   var xhttp;\r\n"
"   try { xhttp = new XMLHttpRequest(); }\r\n"
"   catch (e) { alert(\"exception=\" + e); }\r\n"
"   if (xhttp) {\r\n"
"      xhttp.onreadystatechange = function () {\r\n"
"         if (this.readyState == 4 && this.status == 200)\r\n"
"            returnFn(this);\r\n"
"      }\r\n"
"      if (postData == null) {\r\n"
"         xhttp.open(\"GET\", url, true/*, cfg.userName, cfg.userPassword*/);\r\n"
"         //xhttp.setRequestHeader(\"connection\", \"close\"); // Forbidden header name\r\n"
"         xhttp.send();\r\n"
"      }\r\n"
"      else {\r\n"
"         xhttp.open(\"PUT\", url, true/*, cfg.userName, cfg.userPassword*/);\r\n"
"         //xhttp.setRequestHeader(\"connection\", \"close\"); // Forbidden header name\r\n"
"         xhttp.send(postData);\r\n"
"      }\r\n"
"   }\r\n"
"   else { alert(\"Javascript and Ajax MUST be enabled !\"); }\r\n"
"}\r\n"
"\r\n"
"function isEmptyString(str) {\r\n"
"   return (!str || 0 === str.length);\r\n"
"}\r\n"
;
#define SIZEOF_ 5277
#define STRLEN_ 5276
